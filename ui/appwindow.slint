import { Cell } from "cell.slint";

struct GamePieceData {
    marker: string
}

export component AppWindow inherits Window {

    in-out property <string> current-player: "X";
    in property <[GamePieceData]> board: [
            { marker: "" },
            { marker: "" },
            { marker: "" },
            { marker: "" },
            { marker: "" },
            { marker: "" },
            { marker: "" },
            { marker: "" },
            { marker: "" }
        ];

    callback check-if-game-over();

    private property <length> cell-spacing: 10px;
    private property <length> cell-size: 150px;
    private property <int> row-count: 3;
    private property <int> column-count: 3;

    title: "Tic Tac Toe";
    background: #313e50;
    // Calculate the total width and height of the grid.
    width: (column-count * cell-size) + ((column-count + 1) * cell-spacing);
    height: (row-count * cell-size) + ((row-count + 1) * cell-spacing);

    for cell[i] in board: Cell {
        clicked => {
            if (cell.marker == "") {
                cell.marker = current-player;
                root.current-player = root.current-player == "X" ? "O" : "X";
//                root.check-if-game-over();
            }
        }
        // Calculate the centering offsets (x, y) for the cell.
        x: root.cell-spacing + mod(i, root.column-count) * (root.cell-size + root.cell-spacing);
        y: root.cell-spacing + floor(i / root.row-count) * (root.cell-size + root.cell-spacing);

        width: root.cell-size;
        height: root.cell-size;

        marker: cell.marker;
    }
}